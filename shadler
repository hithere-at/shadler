#!/bin/sh

# Assuming that the structure of URL patterns list never change
# Yt-SD will allways be above Yt-HD
# who cares. they're encrypted now

# Global variables documentation:
# $query_url: A variable containing URL for getting API query results
# $ret_val: A variable containing the return value of a function
# $action: A variable containing what type of action user do, streaming or downloading
# $quality: A variable specifying what quality will the video be streamed or downloaded

# Please make all variables inside a function local

RESET="\033[0m"
MAGENTA="\033[1;35m"
YELLOW="\033[1;33m"
GREEN="\033[1;32m"
RED="\033[1;31m"
BLUE="\033[1;34m"

ANIME_QUERY_VARS='\{%22search%22:\{%22query%22:%22#QUERY#%22,%22allowAdult%22:false,%22allowUnknown%22:false\},%22limit%22:26,%22page%22:1,%22translationType%22:%22sub%22,%22countryOrigin%22:%22ALL%22\}'
ANIME_STREAM_VARS='\{%22showId%22:%22#ANIME_ID#%22,%22translationType%22:%22sub%22,%22episodeString%22:%22#EPISODE#%22\}'
ANIME_QUERY_HASH="06327bc10dd682e1ee7e07b6db9c16e9ad2fd56c1b769e47513128cd5c9fc77a"
ANIME_STREAM_HASH="5f1a64b73793cc2234a389cf3a8f93ad82de7043017dd551f38f65b89daa65e0"
ANIME_DETAIL_HASH="9d7439c90f203e534ca778c4901f9aa2d3ad42c06243ab2c5e6b79612af32028"

MANGA_QUERY_VARS='\{%22search%22:\{%22query%22:%22#QUERY#%22,%22isManga%22:true\},%22limit%22:26,%22page%22:1,%22translationType%22:%22sub%22,%22countryOrigin%22:%22ALL%22\}'
MANGA_READ_VARS='\{%22mangaId%22:%22#MANGA_ID#%22,%22translationType%22:%22sub%22,%22chapterString%22:%22#CHAPTER#%22,%22limit%22:10,%22offset%22:0\}'
MANGA_QUERY_HASH="a27e57ef5de5bae714db701fb7b5cf57e13d57938fc6256f7d5c70a975d11f3d"
MANGA_DETAIL_HASH='529b0770601c7e04c98566c7b7bb3f75178930ae18b3084592d8af2b591a009f'
MANGA_READ_HASH="121996b57011b69386b65ca8fc9e202046fc20bf68b8c8128de0d0e92a681195"

DETAIL_VARS='\{%22_id%22:%22#DEATH#%22\}'
API_EXT='\{%22persistedQuery%22:\{%22version%22:1,%22sha256Hash%22:%22#HASH#%22\}\}'

PLATFORM="$(uname -o)"
DATA_DIR="$HOME/.local/share/shadler"
[ "$PLATFORM" = "GNU/Linux" ] && PLAYER="mpv" || PLAYER="android_mpv"

# args: $1 = input lower range
#       $2 = input upper range
#       $3 = lowerbound range
#       $4 = upperbound range
int_sanitize() {

	if [ -z "$2" ]; then

		if ! [ "$1" -eq "$1" ] 2> /dev/null; then
			return 1

		elif [ "$3" -gt "$1" ] || [ "$1" -gt "$4" ]; then
			return 2

		fi

	elif [ -n "$2" ]; then

		if ! [ "$1" -eq "$1" ] 2> /dev/null || ! [ "$2" -eq "$2" ] 2> /dev/null; then
			return 1

		elif [ "$1" -gt "$2" ] || [ "$2" -lt "$1" ] || [ "$1" -lt "$3" ] || [ "$2" -gt "$4" ]; then
			return 2

		fi


	fi

}

# args: $1 = prompt
#       $2 = Out of range error message
#       $3 = lowerbound range
#       $4 = upperbound range
#       $5 = save data
int_prompt() {

	while true; do
		printf "%b%s%b" "$MAGENTA" "$1" "$RESET"
		read -r bruh die

		[ "$bruh" = "CURR" ] && bruh="$5"

		if [ -z "$bruh" ] && [ -z "$die" ]; then
			printf "%bError: Input cannot be empty%b\n\n" "$RED" "$RESET" >&2
			continue

		else
			int_sanitize "$bruh" "$die" "$3" "$4"
			code=$?

		fi

		case $code in
			1) printf "%bError: Invalid number%b\n\n" "$RED" "$RESET" >&2; continue;;
			2) printf "%b$2${RESET}%b\n\n" "$RED" "$RESET" >&2; continue;;

		esac

		break

	done

	ret_val="START:$bruh STOP:$die"

}

# args $1 = search query
#      $2 = query type (e.g. anime or manga)
get_query_url() {

	query_str=$(printf "%s" "$1" | sed 's/ /%20/g')

	if [ "$2" = "anime" ]; then
		query_obj=$(printf '%s' "$ANIME_QUERY_VARS" | sed -e "s/#QUERY#/$query_str/")
		ext_obj=$(printf '%s' "$API_EXT" | sed -e "s/#HASH#/$ANIME_QUERY_HASH/")

	elif [ "$2" = "manga" ]; then
		query_obj=$(printf '%s' "$MANGA_QUERY_VARS" | sed -e "s/#QUERY#/$query_str/")
		ext_obj=$(printf '%s' "$API_EXT" | sed -e "s/#HASH#/$MANGA_QUERY_HASH/")

	fi

	printf 'https://api.allanime.day/api?variables=%s&extensions=%s' "$query_obj" "$ext_obj"

}

# args: $1 = ID
#       $2 = SHA256 hash
get_detail_url() {

	detail_obj=$(printf '%s' "$DETAIL_VARS" | sed -e "s/#DEATH#/$1/")
	ext_obj=$(printf '%s' "$API_EXT" | sed -e "s/#HASH#/$2/")
	printf 'https://api.allanime.day/api?variables=%s&extensions=%s' "$detail_obj" "$ext_obj"

}

# args: $1 = Type
#       $2 = AllAnime id
#       $3 = Chapter or episode
get_streams_url() {

	if [ "$1" = "anime" ]; then
		stream_obj=$(printf '%s' "$ANIME_STREAM_VARS" | sed -e "s/#ANIME_ID#/$2/" -e "s/#EPISODE#/$3/")
		ext_obj=$(printf '%s' "$API_EXT" | sed -e "s/#HASH#/$ANIME_STREAM_HASH/")

	elif [ "$1" = "manga" ]; then
		stream_obj=$(printf '%s' "$MANGA_READ_VARS" | sed -e "s/#MANGA_ID#/$2/" -e "s/#CHAPTER#/$3/")
		ext_obj=$(printf '%s' "$API_EXT" | sed -e "s/#HASH#/$MANGA_READ_HASH/")

	fi

	printf 'https://api.allanime.day/api?variables=%s&extensions=%s' "$stream_obj" "$ext_obj"

}

# args: $1 = type
#       $2 = title
#       $3 = last read
#       $4 = is new entry (1|0)
save_data() {
	if [ "$4" -eq 1 ]; then
		echo "type=$1 title=$2 $3" >> ~/.local/share/shadler/savedata.sv

	else
		sed -i "s/\(type=$1 title=$2\) [0-9]\+/\1 $3/" ~/.local/share/shadler/savedata.sv

	fi

}

# args: $1 = type
# args: $2 = title
load_data() {

	temp=$(grep "type=$1 title=$2" ~/.local/share/shadler/savedata.sv 2> /dev/null | grep -o "[0-9]\+")
	printf "%s" "$temp"

}

# args: $1 = Type
base_prompt() {
	printf "%bQuery:%b " "$MAGENTA" "$RESET"
	read -r keywords
	query_url=$(get_query_url "$keywords" "$1")

}

# args: $1 = title (optional)
#       $2 = video url
play_video() {

	case "$PLAYER" in
		"mpv") nohup mpv --force-media-title="$1" "$2" > /dev/null 2>&1 &;;
		"vlc") nohup vlc --play-and-exit --meta-title="$1" "$2" > /dev/null 2>&1 &;;
		"android_mpv") nohup am start --user 0 -a android.intent.action.VIEW -n is.xyz.mpv/.MPVActivity -d "$2" > /dev/null 2>&1 &;;
		"android_vlc") nohup am start --user 0 -a android.intent.action.VIEW -n org.videolan.vlc/org.videolan.vlc.gui.video.VideoPlayerActivity -d "$2" -e 'title' "$1" > /dev/null 2>&1 &;;
		"nextplayer") nohup am start --user 0 -a android.intent.action.VIEW -n dev.anilbeesetti.nextplayer/dev.anilbeesetti.nextplayer.feature.player.PlayerActivity -d "$2" > /dev/null 2>&1 &;;

	esac

}

preparse_handler() {

	type="$1"
	shift

	while [ $# -gt 0 ]; do

		case "$1" in
			-q | --query) shift; query_url=$(get_query_url "$1" "$type");;
			-v | --vlc) [ "$PLATFORM" = "GNU/Linux" ] && PLAYER="vlc" || PLAYER="android_vlc";;
			-n | --nextplay) [ "$PLATFORM" = "Android" ] && PLAYER="nextplayer" || PLAYER="mpv";;
			-s | --stream) action=1;;
			-d | --download) action=2;;
			-r | --range)
				shift
				first_letter=$(echo "$1" | grep -o "[0-9]\+")
				if [ -n "$first_letter" ]; then
					a=$1
					shift
				else
					shift
					continue
				fi
				first_letter=$(echo "$1" | grep -o "[0-9]\+")
				if [ -n "$first_letter" ]; then b=$1; else b=$a; fi
				int_sanitize "$a" "$b" 1 3000
				code=$?
				case $code in
					1) printf "%bError: Invalid number%b\n\n" "$RED" "$RESET" >&2; return 6;;
					2) printf "%bError: Invalid range%b\n\n" "$RED" "$RESET" >&2; return 6;;
				esac
				start=$a
				stop=$b
				continue
				;;

		esac

		shift

	done

}

show_help() {
	cat << EOF
Usage: shadler <subcommand> [options]

Example: shadler anime -v -r 8 -s -q "oshi no ko"
         shadler manga -r 10 12 -s -q "kaoru hana wa rin to saku"

Options:

    -q | --query <keywords>         Search anime or manga with specified keywords. Please quote the keywords
    -v | --vlc                      Stream using VLC media player
    -n | --nextplay                 Stream using NextPlayer. Available only on Android
    -s | --stream                   Stream anime episode or read manga chapters with online
    -d | --download                 Download anime episode or download manga chapters for offline reading
    -r | --range <lower> <upper>    Specify episode/chapter range
EOF

}

anime_handler() {

	counter=0
	video_links=""

	[ -z "$query_url" ] && base_prompt 'anime'; printf "\n"

	api_resp=$(curl -s -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0" -H 'Referer: https://allanime.to/' "$query_url")

	name_list=$(printf "%s" "$api_resp" | grep -o 'name":"[^,]\+' | sed 's/name":"\|"$\|\\//g')
	anime_id_list=$(printf "%s" "$api_resp" | grep -o '_id":"[^"]\+' | sed 's/_id":"//g')
	anime_ep_list=$(printf "%s" "$api_resp" | grep -o 'availableEpisodes":{"sub":[0-9]\+' | sed 's/availableEpisodes":{"sub"://g')

	name_list_len=$(echo "$name_list" | wc -l)

	echo "$name_list" | while read -r line; do
		counter=$((counter + 1))
		printf "%b[%s] %b%s%b\n" "$MAGENTA" "$counter" "$BLUE" "$line" "$RESET"
	done

	counter=0

	int_prompt 'Select anime: ' 'Error: Anime out of range' 1 "$name_list_len"
	chosen_one=$(printf "%s" "$ret_val" | grep -o "START:[0-9]\+" | sed "s/START://")

	show_id=$(echo "$anime_id_list" | sed "${chosen_one}q;d")
	available_ep=$(echo "$anime_ep_list" | sed "${chosen_one}q;d")
	anime_name=$(echo "$name_list" | sed "${chosen_one}q;d")

	last_read=$(load_data "anime" "$anime_name")
	[ -z "$last_read" ] && last_read=1 is_new_entry=1 || is_new_entry=0

	if [ -z "$start" ] && [ -z "$stop" ]; then
		int_prompt "Select episode [1-${available_ep}]: " 'Error: Episode out of range' 1 "$available_ep" "$last_read"
		start=$(printf "%s" "$ret_val" | grep -o "START:[0-9]\+" | sed "s/START://")
		stop=$(printf "%s" "$ret_val" | grep -o "STOP:[0-9]\+" | sed "s/STOP://")

	else
		[ "$start" -gt "$available_ep" ] && start=$available_ep
		if [ "$stop" = "" ] || [ "$stop" -gt "$available_ep" ]; then stop=$available_ep; fi

	fi

	ep_idx=$start
	[ -z "$stop" ] && stop=$start

	save_data "anime" "$anime_name" $((stop + 1)) "$is_new_entry"

	if [ -z "$action" ]; then
		printf "\n%b[1] %bStream%b\n" "$MAGENTA" "$BLUE" "$RESET"
		printf "%b[2] %bDownload%b\n" "$MAGENTA" "$BLUE" "$RESET"

		int_prompt 'Select action: ' 'Error: Action out of range' 1 2
		action=$(printf "%s" "$ret_val" | grep -o "START:[0-9]\+" | sed "s/START://")
		printf "\n"

	fi

	if ! [ -d "$DATA_DIR/anime/$anime_name" ]; then
		mkdir -p "$DATA_DIR/anime/$anime_name"

	fi

	ep_detail_url=$(get_detail_url "$show_id" "$ANIME_DETAIL_HASH")
	api_resp=$(curl -s -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0" -H 'Referer: https://allanime.to/' "$ep_detail_url")
    good_idx=$(echo "$api_resp" | grep -o 'sub":\[[^\[]*' | grep -o '"[^,\[]*"' | sed 's/"//g' | head -n -1 | tac)

	anime_dl_dir="$DATA_DIR/anime/$anime_name"

	while [ "$ep_idx" -le "$stop" ]; do

		ep_str=$(echo "$good_idx" | sed "${ep_idx}q;d")
        stream_url=$(get_streams_url "anime" "$show_id" "$ep_str")
        api_resp=$(curl -s -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0" -H 'Referer: https://allanime.to/' "$stream_url")

		# Use the echo command to avoid printf invalid directive
		hls_source=$(echo "$api_resp" | grep -o 'apivtwo/[^"]*')
    	hls_source=$(printf "%s" "$hls_source" | sed -e "s/clock/clock.json/" -e 's/\/download//')
		api_resp=$(curl -s "https://allanime.pro/${hls_source}")
		video_url=$(echo "$api_resp" | grep -o 'https://[^"]*' | head -n 1)

		if [ "$action" -eq 1 ]; then
			video_links="${video_links}$video_url\n"
			printf "%bEpisode %s URL found%b\n" "$GREEN" "$ep_idx" "$RESET"

		else
			printf "%bDownloading Episode %s...%b\n\n" "$YELLOW" "$ep_idx" "$RESET"
			curl -o "$anime_dl_dir/Episode ${ep_idx}.mp4" "$video_url"
			printf "\n%bEpisode %s downloaded at \"%s/Episode %s.mp4\"%b\n\n" "$YELLOW" "$ep_idx" "$anime_dl_dir" "$ep_idx" "$RESET"

		fi

		ep_idx=$((ep_idx + 1))

	done

	ep_idx=$start

	if [ "$action" -eq 1 ]; then

		while [ "$ep_idx" -le "$stop" ]; do
			counter=$((counter + 1))

			printf "%bPlaying episode %s...%b\n" "$YELLOW" "$ep_idx" "$RESET"

			case "$PLATFORM" in
				"Android") video_url=$(printf "%b" "$video_links" | sed "${counter}q;d"); play_video "$anime_name" "$video_url";;
				"GNU/Linux") video_url=$(printf "%b" "$video_links" | sed "${counter}q;d"); play_video "$anime_name" "$video_url";;
				*) printf "%bUnknown platform. You can copy the video link below and paste it to a video player%b\n\n" "$YELLOW" "$RESET"; echo "${GREEN}$video_links${RESET}"; break;;

			esac

			ep_idx=$((ep_idx + 1))
			[ $ep_idx -gt "$stop" ] && break

			printf "\n%b[1] %bNext episode%b\n" "$MAGENTA" "$BLUE" "$RESET"
			printf "%b[2] %bQuit%b\n" "$MAGENTA" "$BLUE" "$RESET"

			int_prompt "Select action: " "Error: action out of range" 1 2
			action=$(printf "%s" "$ret_val" | grep -o "START:[0-9]\+" | sed "s/START://")

			case $action in
				1) continue;;
				2) break;;

			esac

		done

	fi

}

manga_handler() {

	img_tags=""

	[ -z "$query_url" ] && base_prompt "manga"; printf "\n"

	api_resp=$(curl -s -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0" -H 'Referer: https://allanime.to/' "$query_url")

	name_list=$(printf "%s" "$api_resp" | grep -o 'name":"[^,]\+' | sed -e 's/name":"\|\\"\|"//g')
	id_list=$(printf "%s" "$api_resp" | grep -o '_id":"[^"]\+' | sed 's/_id":"//g')

	list_len=$(echo "$name_list" | wc -l)
	counter=0

	echo "$name_list" | while read -r line; do
		counter=$((counter + 1))
		printf "%b[%s] %b%s%b\n" "$MAGENTA" "$counter" "$BLUE" "$line" "$RESET"

	done

	int_prompt "Select manga: " "Error: Manga out of range" 1 "$list_len"
	chosen_one=$(printf "%s" "$ret_val" | grep -o "START:[0-9]\+" | sed "s/START://")

	curr_id=$(echo "$id_list" | sed "${chosen_one}q;d")
	manga_name=$(echo "$name_list" | sed "${chosen_one}q;d")
	panel_url_head="https://aln.youtube-anime.com/"
	chp_detail_url=$(get_detail_url "$curr_id" "$MANGA_DETAIL_HASH")
	api_resp=$(curl -s -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0" -H 'Referer: https://allanime.to/' "$chp_detail_url")
	chapters_idx=$(echo "$api_resp" | grep -o 'sub":\[.*"[0-9]"\]' | grep -o '"[^,\[]*"' | sed 's/"//g' | tac)
	available_chp=$(echo "$chapters_idx" | wc -l)

	last_read=$(load_data "manga" "$manga_name")
	[ -z "$last_read" ] && last_read=1 is_new_entry=1 || is_new_entry=0

	if [ -z "$start" ] && [ -z "$stop" ]; then
		int_prompt "Select chapter [1-${available_chp}]: " "Error: Chapter out of range" 1 "$available_chp" "$last_read"
		start=$(printf "%s" "$ret_val" | grep -o "START:[0-9]\+" | sed "s/START://")
		stop=$(printf "%s" "$ret_val" | grep -o "STOP:[0-9]\+" | sed "s/STOP://")

	else
		[ "$start" -gt "$available_chp" ] && start=$available_chp
		if [ "$stop" = "" ] || [ "$stop" -gt "$available_chp" ]; then stop=$available_chp; fi

	fi

	save_data "manga" "$manga_name" $((stop + 1)) "$is_new_entry"

	chp_idx=$start
	[ -z "$stop" ] && stop=$start

	if [ -z "$action" ]; then
		printf "\n%b[1] %bRead online%b\n" "$MAGENTA" "$BLUE" "$RESET"
		printf "%b[2] %bDownload%b\n" "$MAGENTA" "$BLUE" "$RESET"

		int_prompt "Select action: " "Error: Action out of range" 1 2
		action=$(printf "%s" "$ret_val" | grep -o "START:[0-9]\+" | sed "s/START://")

	fi

	printf "\n%bGenerating HTML file...%b\n" "$YELLOW" "$RESET"

	if ! [ -d "$DATA_DIR/manga/$manga_name" ]; then
    		mkdir -p "$DATA_DIR/manga/$manga_name"

	fi

	while [ "$chp_idx" -le "$stop" ]; do
		proper_idx=$(echo "$chapters_idx" | sed "${chp_idx}q;d")
		read_url=$(get_streams_url "manga" "$curr_id" "$proper_idx")
		api_resp=$(curl -s -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0" -H 'Referer: https://allanime.to/' "$read_url")
		panel_url_list=$(echo "$api_resp" | grep -o '"sourceName":"YoutubeAnime[^]]*' | grep -o 'url":"[^"]*' | sed 's/url":"//g')
		panel_url_len=$(echo "$panel_url_list" | wc -l)
		panel_idx=1

		if [ "$action" -eq 1 ]; then

			while [ $panel_idx -le "$panel_url_len" ]; do
				panel=$(echo "$panel_url_list" | awk "NR==${panel_idx}")
				img_tags="${img_tags}<img src='${panel_url_head}${panel}' alt='Failed to load image'>\n"
				panel_idx=$((panel_idx + 1))

			done

		else
			counter=0

			while [ $panel_idx -le "$panel_url_len" ]; do
                # Assume that panel image format will be png
				img_path="$DATA_DIR/manga/$manga_name"
                img_filename="chp${chp_idx}_${panel_idx}.png"
				panel=$(echo "$panel_url_list" | awk "NR==${panel_idx}")
				curl -s -o "$img_path/$img_filename" "${panel_url_head}${panel}"
                [ "$PLATFORM" = "Android" ] && img_src="http://127.0.0.1:10100/${img_filename}" || img_src="$img_path/$img_filename"
				img_tags="${img_tags}<img src='$img_src' alt='Failed to load image'>\n"
				panel_idx=$((panel_idx + 1))

			done

		fi

		chp_idx=$((chp_idx + 1))

		done

	cat << EOF > "$DATA_DIR/manga/$manga_name/${start}-${stop}.html"
<!DOCTYPE html>
<html>

	<head>
		<title>$manga_name</title>
		<meta name='viewport' content='width=device-width, initial-scale=1.0'>
		<style type='text/css'>body { background-color: #3B3A39; }</style>
	</head>

	<body>
		$(printf "%b" "$img_tags")
	</body>

</html>
EOF

    if [ "$PLATFORM" = "Android" ]; then
        cat << EOF > "$DATA_DIR/manga/$manga_name/read_${start}-${stop}"
#!/bin/sh
python3 -m http.server -d "$DATA_DIR/manga/$manga_name/" 10100 > /dev/null 2>&1 &
termux-open http://127.0.0.1:10100/$start-$stop.html
EOF
        chmod +x "$DATA_DIR/manga/$manga_name/read_${start}-${stop}"
        printf "\n%bHTML file generated. Start reading by running the script located at \"%s/manga/%s/read_%s-%s%b\"\n" "$GREEN" "$DATA_DIR" "$manga_name" "$start" "$stop" "$RESET"

    else

    	printf "\n%bHTML file generated. Open the file by running xdg-open \"%s/manga/%s/%s-%s.html%b\"\n" "$GREEN" "$DATA_DIR" "$manga_name" "$start" "$stop" "$RESET"

    fi

}

# MAIN
mkdir -p ~/.local/share/shadler

case "$1" in
	anime) preparse_handler "$@"; anime_handler;;
	manga) preparse_handler "$@"; manga_handler;;
	help) show_help;;
	*) printf "%bError: Unknown subcommand. Available subcommand is 'anime' and 'manga', and 'help'%b\n" "$RED" "$RESET";;

esac
